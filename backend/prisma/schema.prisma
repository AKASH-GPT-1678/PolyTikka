// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Politician {
  id            String   @id @default(uuid())
  name          String
  party         String
  state         String
  constituency  String
  age           Int?
  gender        String?
  education     String?
  criminalCases Int      @default(0)
  totalAssets   Float? // In lakhs or crores
  position      String? // e.g., MP, MLA, CM
  biography     String?  @db.Text
  profileImage  String? // URL
  avgRatings    Int
  numOfSearched Int?
  ratingsOutOf  BigInt?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  criminalCase   CriminalCase[]
  newsArticles   NewsArticle[]
  Comment        Comment[]
  workHistory    WorkHistory[]
  electionResult ElectionResult[]
  familyDetail   FamilyDetail?
  assetDetail    AssetDetail?
  PublicProfile  PublicProfile?
}

model WorkHistory {
  id           String     @id @default(uuid())
  role         String // e.g., Municipal Corporator, MLA, MP, CM
  startYear    Int?
  endYear      Int?
  constituency String?
  state        String?
  politician   Politician @relation(fields: [politicianId], references: [id])
  politicianId String
}

model ElectionResult {
  id            String     @id @default(uuid())
  year          Int
  electionType  String // e.g., Lok Sabha, Vidhan Sabha
  constituency  String
  state         String
  party         String
  result        String // e.g., "✅ Won" or "❌ Lost"
  totalVotes    Int
  voteShare     Float // e.g., 63.6
  opponentName  String
  victoryMargin Int // e.g., 479505
  politician    Politician @relation(fields: [politicianId], references: [id])
  politicianId  String
}

model FamilyDetail {
  id           String     @id @default(uuid())
  spouse       String?
  children     Int?
  fatherName   String?
  motherName   String?
  background   String?    @db.Text
  politician   Politician @relation(fields: [politicianId], references: [id])
  politicianId String     @unique
}

model AssetDetail {
  id              String     @id @default(uuid())
  totalAssets     Float // ₹8.5 Cr
  movableAssets   Float // ₹2.3 Cr
  immovableAssets Float // ₹6.2 Cr
  politicianId    String     @unique
  politician      Politician @relation(fields: [politicianId], references: [id])
}

model CriminalCase {
  id           String     @id @default(uuid())
  title        String
  description  String     @db.Text
  status       String // e.g., Pending, Acquitted, Convicted
  filedAt      DateTime?
  politicianId String
  politician   Politician @relation(fields: [politicianId], references: [id])
}

model PublicProfile {
  id               String   @id @default(uuid())
  coreIdeology     String // e.g., "Development for All"
  visionStatement  String   @db.Text
  publicPerception String   @db.Text
  keyStrengths     String[] // e.g., ["Oratory Skills", "Grassroots Engagement"]
  focusAreas       String[] // e.g., ["Digital Transformation", "Rural Empowerment"]
  leadershipStyle  String? // e.g., "Transformative", "Inclusive"

  politician   Politician @relation(fields: [politicianId], references: [id])
  politicianId String     @unique
}

model NewsArticle {
  id           String     @id @default(uuid())
  headline     String
  url          String
  publishedAt  DateTime
  politicianId String
  politician   Politician @relation(fields: [politicianId], references: [id])
}

model News {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.Text
  category    String?
  reads       Int?
  source      String // e.g., "NDTV", "BBC", "Times of India"
  url         String // link to the original article
  imageUrl    String? // optional thumbnail or article image
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  phoneNumber String?  @unique // optional but must be unique if provided
  contactInfo String? // can store address or any other contact notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id           String      @id @default(cuid())
  politicianId String?
  politician   Politician? @relation(fields: [politicianId], references: [id])
}
