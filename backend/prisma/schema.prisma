// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Politician {
  id            String         @id @default(uuid())
  name          String
  party         String
  state         String
  constituency  String
  age           Int?
  gender        String?
  education     String?
  criminalCases Int            @default(0)
  totalAssets   Float? // in lakhs or crores
  position      String? // e.g., MP, MLA, CM
  biography     String?        @db.Text
  profileImage  String? // URL
  avgRatings    Int

  ratingsOutOf  BigInt?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  criminalCase  CriminalCase[]
  newsArticles  NewsArticle[]
  Comment       Comment[]
}

model CriminalCase {
  id           String     @id @default(uuid())
  title        String
  description  String     @db.Text
  status       String // e.g., Pending, Acquitted, Convicted
  filedAt      DateTime?
  politicianId String
  politician   Politician @relation(fields: [politicianId], references: [id])
}

model NewsArticle {
  id           String     @id @default(uuid())
  headline     String
  url          String
  publishedAt  DateTime
  politicianId String
  politician   Politician @relation(fields: [politicianId], references: [id])
}

model News {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.Text
  source      String // e.g., "NDTV", "BBC", "Times of India"
  url         String // link to the original article
  imageUrl    String? // optional thumbnail or article image
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  phoneNumber String?  @unique // optional but must be unique if provided
  contactInfo String? // can store address or any other contact notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id           String @id @default(cuid())
  politicianId String?
  politician   Politician? @relation(fields: [politicianId], references: [id])
}
